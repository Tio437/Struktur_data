{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOG1e8jrysJXtFO4rVXev0E"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Materi"],"metadata":{"id":"RjVBk2Usrhst"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4w1VHLhBf1dQ","executionInfo":{"status":"ok","timestamp":1746752693283,"user_tz":-420,"elapsed":7,"user":{"displayName":"Tio Pambud","userId":"15236740662393433908"}},"outputId":"8694be15-ad67-4321-e7f6-19fdf7f23fb7"},"outputs":[{"output_type":"stream","name":"stdout","text":["4 2 5 1 3 "]}],"source":["class node :\n","  def __init__(self,data) :\n","    self.data = data\n","    self.left = None\n","    self.right = None\n","\n","root = node(1)\n","root.left = node(2)\n","root.right = node(3)\n","root.left.left = node(4)\n","root.left.right = node(5)\n","\n","def inorder (node) :\n","  if node :\n","    inorder(node.left)\n","    print(node.data,end = ' ')\n","    inorder(node.right)\n","\n","inorder(root)"]},{"cell_type":"code","source":["class node :\n","  def __init__(self,data) :\n","    self.data = data\n","    self.left = None\n","    self.right = None\n","\n","class binarytree :\n","  def __init__(self) :\n","    self.root = None\n","  def insert(self,root,data):\n","    if root is None :\n","      return node(data)\n","    if data < root.data :\n","      root.lef = self.insert(root.left,data)\n","    else :\n","      root.right = self.insert(root.right,data)\n","    return root\n","\n","bst = binarytree()\n","root = None\n","data_list = [50,30,70,20,40,60,80]\n","for value in data_list :\n","  root = bst.insert(root,value)\n"],"metadata":{"id":"ylVqEZqEf6P6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def inorder(node) :\n","  if node :\n","    inorder(node.left)\n","    print(node.data,end = ' ')\n","    inorder(node.right)\n","\n","def preorder(node) :\n","  if node :\n","    print(node.data,end=' ')\n","    preorder(node.left)\n","    preorder(node.right)\n","\n","def postorder(node) :\n","  if node :\n","    postorder(node.left)\n","    postorder(node.right)\n","    print(node.data,end=' ')\n","\n","print(\"inorder tranversal :\")\n","inorder(root)\n","print(\"\\npreorder tranversal :\")\n","preorder(root)\n","print(\"\\npostorder tranversal :\")\n","postorder(root)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EyguZf-hovXd","executionInfo":{"status":"ok","timestamp":1747804300123,"user_tz":-420,"elapsed":17,"user":{"displayName":"Tio Pambud","userId":"15236740662393433908"}},"outputId":"68a8ca4a-47c2-4f0c-8d66-30e1fc15694f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["inorder tranversal :\n","18 7 6 15 18 \n","preorder tranversal :\n","15 7 18 6 18 \n","postorder tranversal :\n","18 6 7 18 15 "]}]},{"cell_type":"markdown","source":["### tugas 1"],"metadata":{"id":"M27XnPzqjAIW"}},{"cell_type":"code","source":["class node :\n","  def __init__(self,data) :\n","    self.data = data\n","    self.left = None\n","    self.right = None\n","\n","root = node(15)\n","root.left = node(7)\n","root.right = node(76)\n","root.left.left = node(18)\n","root.right.right = node(6)\n","\n","def inorder (node) :\n","  if node :\n","    inorder(node.left)\n","    print(node.data,end = ' ')\n","    inorder(node.right)\n","\n","inorder(root)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MHGGg0c3q6QI","executionInfo":{"status":"ok","timestamp":1747928739177,"user_tz":-420,"elapsed":38,"user":{"displayName":"Tio Pambud","userId":"15236740662393433908"}},"outputId":"c8f5fbff-69f4-496e-bee1-a664ad84d913"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["18 7 15 76 6 "]}]},{"cell_type":"code","source":["class Node:\n","    def __init__(self, data):\n","        self.data = data\n","        self.left = None\n","        self.right = None\n","\n","nama = \"Tio Restu Pambudi\"\n","npm = \"2440506076\"\n","tanggal_lahir = \"1806\"\n","\n","jumlah_huruf_nama = len(nama.replace(\" \", \"\"))\n","huruf_vokal = sum(1 for char in nama.lower() if char in ['a', 'i', 'u', 'e', 'o'])\n","dua_digit_npm = int(npm[-2:])\n","tanggal = int(tanggal_lahir[:2])\n","bulan = int(tanggal_lahir[2:])\n","\n","root = Node(jumlah_huruf_nama)\n","root.left = Node(huruf_vokal)\n","root.right = Node(dua_digit_npm)\n","root.left.left = Node(tanggal)\n","root.right.right = Node(bulan)\n","\n","def inorder(node):\n","    if node:\n","        inorder(node.left)\n","        print(node.data, end=' ')\n","        inorder(node.right)\n","\n","# Tampilkan hasil\n","print(\"Struktur Binary Tree berdasarkan identitas:\")\n","print(f\"Root (jumlah huruf nama): {root.data}\")\n","print(f\"Anak kiri (huruf vokal): {root.left.data}\")\n","print(f\"Anak kanan (2 digit NPM): {root.right.data}\")\n","print(f\"Cucu kiri (tanggal lahir): {root.left.left.data}\")\n","print(f\"Cucu kanan (bulan lahir): {root.right.right.data}\")\n","\n","print(\"\\nHasil Inorder Traversal:\")\n","inorder(root)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"70ZDeBI4v4Hw","executionInfo":{"status":"ok","timestamp":1747807176537,"user_tz":-420,"elapsed":34,"user":{"displayName":"Tio Pambud","userId":"15236740662393433908"}},"outputId":"d4268d10-f27b-4585-f829-1de151c54fe7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Struktur Binary Tree berdasarkan identitas:\n","Root (jumlah huruf nama): 15\n","Anak kiri (huruf vokal): 7\n","Anak kanan (2 digit NPM): 76\n","Cucu kiri (tanggal lahir): 18\n","Cucu kanan (bulan lahir): 6\n","\n","Hasil Inorder Traversal:\n","18 7 15 76 6 "]}]},{"cell_type":"markdown","source":["### tugas 2"],"metadata":{"id":"hEP9dzfFi5tm"}},{"cell_type":"code","source":["class Node:\n","    def __init__(self, key):\n","        self.left = None\n","        self.right = None\n","        self.val = key\n","\n","\n","def insert(root, key):\n","    if root is None:\n","        return Node(key)\n","    else:\n","        if root.val < key:\n","            root.right = insert(root.right, key)\n","        else:\n","            root.left = insert(root.left, key)\n","    return root\n","\n","\n","# traversal inorder\n","def inorder_traversal(root):\n","    if root:\n","        inorder_traversal(root.left)\n","        print(root.val, end=\" \")\n","        inorder_traversal(root.right)\n","\n","# traversal preorder\n","def preorder_traversal(root):\n","    if root:\n","        print(root.val, end=\" \")\n","        preorder_traversal(root.left)\n","        preorder_traversal(root.right)\n","\n","# traversal postorder\n","def postorder_traversal(root):\n","    if root:\n","        postorder_traversal(root.left)\n","        postorder_traversal(root.right)\n","        print(root.val, end=\" \")\n","\n","def search(root, key):\n","    if root is None or root.val == key:\n","        return root\n","    if root.val < key:\n","        return search(root.right, key)\n","    return search(root.left, key)\n","\n","data = [79, 18, 6, 65, 66, 7, 42]\n","\n","root = None\n","for num in data:\n","    root = insert(root, num)\n","\n","print(\"Inorder traversal:\")\n","inorder_traversal(root)\n","print(\"\\nPreorder traversal:\")\n","preorder_traversal(root)\n","print(\"\\nPostorder traversal:\")\n","postorder_traversal(root)\n","\n","\n","search_key1 = 79\n","search_key2 = 99\n","\n","print(f\"\\n\\nMencari angka {search_key1}:\")\n","result = search(root, search_key1)\n","print(\"Ditemukan!\" if result else \"Tidak ditemukan!\")\n","\n","print(f\"\\nMencari angka {search_key2}:\")\n","result = search(root, search_key2)\n","print(\"Ditemukan!\" if result else \"Tidak ditemukan!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pYPAvLc9RAwA","executionInfo":{"status":"ok","timestamp":1747805386539,"user_tz":-420,"elapsed":56,"user":{"displayName":"Tio Pambud","userId":"15236740662393433908"}},"outputId":"3207d1b0-3941-4cae-e79d-bf6d413b31fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Inorder traversal:\n","6 7 18 42 65 66 79 \n","Preorder traversal:\n","79 18 6 7 65 42 66 \n","Postorder traversal:\n","7 6 42 66 65 18 79 \n","\n","Mencari angka 79:\n","Ditemukan!\n","\n","Mencari angka 99:\n","Tidak ditemukan!\n"]}]}]}
